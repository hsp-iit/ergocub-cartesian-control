/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <gb-ergocub-cartesian-service/ReachabilityEvaluationState.h>

// Constructor with field values
ReachabilityEvaluationState::ReachabilityEvaluationState(const std::string& status,
                                                         const yarp::sig::Matrix& reached_pose) :
        WirePortable(),
        status(status),
        reached_pose(reached_pose)
{
}

// Read structure on a Wire
bool ReachabilityEvaluationState::read(yarp::os::idl::WireReader& reader)
{
    if (!read_status(reader)) {
        return false;
    }
    if (!nested_read_reached_pose(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool ReachabilityEvaluationState::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool ReachabilityEvaluationState::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_status(writer)) {
        return false;
    }
    if (!nested_write_reached_pose(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool ReachabilityEvaluationState::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string ReachabilityEvaluationState::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read status field
bool ReachabilityEvaluationState::read_status(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(status)) {
        reader.fail();
        return false;
    }
    return true;
}

// write status field
bool ReachabilityEvaluationState::write_status(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(status)) {
        return false;
    }
    return true;
}

// read (nested) status field
bool ReachabilityEvaluationState::nested_read_status(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(status)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) status field
bool ReachabilityEvaluationState::nested_write_status(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(status)) {
        return false;
    }
    return true;
}

// read reached_pose field
bool ReachabilityEvaluationState::read_reached_pose(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(reached_pose)) {
        reader.fail();
        return false;
    }
    return true;
}

// write reached_pose field
bool ReachabilityEvaluationState::write_reached_pose(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(reached_pose)) {
        return false;
    }
    return true;
}

// read (nested) reached_pose field
bool ReachabilityEvaluationState::nested_read_reached_pose(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(reached_pose)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) reached_pose field
bool ReachabilityEvaluationState::nested_write_reached_pose(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(reached_pose)) {
        return false;
    }
    return true;
}

/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/conf/version.h>
#include <mc-ergocub-bimanual-service/ergoCubBimanualService.h>
#include <yarp/os/LogComponent.h>
#include <yarp/os/LogStream.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

namespace
{
    YARP_LOG_COMPONENT(SERVICE_LOG_COMPONENT, "ergoCubBimanualService")
}

//ergoCubBimanualService_getRemoteProtocolVersion_helper declaration
class ergoCubBimanualService_getRemoteProtocolVersion_helper :
public yarp::os::Portable
{
public:
    ergoCubBimanualService_getRemoteProtocolVersion_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    yarp::os::ApplicationNetworkProtocolVersion helper_proto;
};

bool ergoCubBimanualService_getRemoteProtocolVersion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeString("getRemoteProtocolVersion")) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_getRemoteProtocolVersion_helper ::read(yarp::os::ConnectionReader & connection)
 {
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    if (!helper_proto.read(connection)) {
        reader.fail();
        return false;
    }
    return true;
}

//ProtocolVersion, client side
yarp::os::ApplicationNetworkProtocolVersion ergoCubBimanualService::getRemoteProtocolVersion()
 {
    if(!yarp().canWrite()) {
        yError(" Missing server method ergoCubBimanualService::getRemoteProtocolVersion");
    }
    ergoCubBimanualService_getRemoteProtocolVersion_helper helper{};
    bool ok = yarp().write(helper, helper);
    if (ok) {
        return helper.helper_proto;}
    else {
        yarp::os::ApplicationNetworkProtocolVersion failureproto;
        return failureproto;}
}

//ProtocolVersion, client side
bool ergoCubBimanualService::checkProtocolVersion()
 {
        auto locproto = this->getLocalProtocolVersion();
        auto remproto = this->getRemoteProtocolVersion();
        if (remproto.protocol_version != locproto.protocol_version)
        {
            yCError(SERVICE_LOG_COMPONENT) << "Invalid communication protocol.";
            yCError(SERVICE_LOG_COMPONENT) << "Local Protocol Version: " << locproto.toString();
            yCError(SERVICE_LOG_COMPONENT) << "Remote Protocol Version: " << remproto.toString();
            return false;
        }
        return true;
}

//ProtocolVersion, server side
yarp::os::ApplicationNetworkProtocolVersion ergoCubBimanualService::getLocalProtocolVersion()
{
    yarp::os::ApplicationNetworkProtocolVersion myproto;
    //myproto.protocol_version using default value = 0
    //to change this value add the following line to the .thrift file:
    //const i16 protocol_version = <your_number_here>
    myproto.protocol_version = 0;
    myproto.yarp_major = YARP_VERSION_MAJOR;
    myproto.yarp_minor = YARP_VERSION_MINOR;
    myproto.yarp_patch = YARP_VERSION_PATCH;
    return myproto;
}

// go_to_pose helper class declaration
class ergoCubBimanualService_go_to_pose_helper :
        public yarp::os::Portable
{
public:
    ergoCubBimanualService_go_to_pose_helper() = default;
    ergoCubBimanualService_go_to_pose_helper(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const std::string& arm);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const std::string& arm);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double x{0.0};
        double y{0.0};
        double z{0.0};
        double q_x{0.0};
        double q_y{0.0};
        double q_z{0.0};
        double q_w{0.0};
        std::string arm{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double, const double, const double, const double, const double, const std::string&);
    void call(ergoCubBimanualService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"go_to_pose"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{11};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubBimanualService::go_to_pose(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const std::string& arm)"};
    static constexpr const char* s_help{""};
};

// go_to_position helper class declaration
class ergoCubBimanualService_go_to_position_helper :
        public yarp::os::Portable
{
public:
    ergoCubBimanualService_go_to_position_helper() = default;
    ergoCubBimanualService_go_to_position_helper(const double x, const double y, const double z, const std::string& arm);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double x, const double y, const double z, const std::string& arm);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double x{0.0};
        double y{0.0};
        double z{0.0};
        std::string arm{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double, const std::string&);
    void call(ergoCubBimanualService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"go_to_position"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{7};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubBimanualService::go_to_position(const double x, const double y, const double z, const std::string& arm)"};
    static constexpr const char* s_help{""};
};

// rotate_rad helper class declaration
class ergoCubBimanualService_rotate_rad_helper :
        public yarp::os::Portable
{
public:
    ergoCubBimanualService_rotate_rad_helper() = default;
    ergoCubBimanualService_rotate_rad_helper(const double angle, const double x, const double y, const double z, const std::string& arm);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double angle, const double x, const double y, const double z, const std::string& arm);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double angle{0.0};
        double x{0.0};
        double y{0.0};
        double z{0.0};
        std::string arm{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double, const double, const std::string&);
    void call(ergoCubBimanualService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"rotate_rad"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{7};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubBimanualService::rotate_rad(const double angle, const double x, const double y, const double z, const std::string& arm)"};
    static constexpr const char* s_help{""};
};

// rotate_deg helper class declaration
class ergoCubBimanualService_rotate_deg_helper :
        public yarp::os::Portable
{
public:
    ergoCubBimanualService_rotate_deg_helper() = default;
    ergoCubBimanualService_rotate_deg_helper(const double angle, const double x, const double y, const double z, const std::string& arm);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double angle, const double x, const double y, const double z, const std::string& arm);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double angle{0.0};
        double x{0.0};
        double y{0.0};
        double z{0.0};
        std::string arm{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double, const double, const std::string&);
    void call(ergoCubBimanualService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"rotate_deg"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{7};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubBimanualService::rotate_deg(const double angle, const double x, const double y, const double z, const std::string& arm)"};
    static constexpr const char* s_help{""};
};

// get_pose helper class declaration
class ergoCubBimanualService_get_pose_helper :
        public yarp::os::Portable
{
public:
    ergoCubBimanualService_get_pose_helper() = default;
    explicit ergoCubBimanualService_get_pose_helper(const std::string& arm);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& arm);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string arm{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::sig::Matrix return_helper{};
    };

    using funcptr_t = yarp::sig::Matrix (*)(const std::string&);
    void call(ergoCubBimanualService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_pose"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::sig::Matrix ergoCubBimanualService::get_pose(const std::string& arm)"};
    static constexpr const char* s_help{""};
};

// go_home helper class declaration
class ergoCubBimanualService_go_home_helper :
        public yarp::os::Portable
{
public:
    ergoCubBimanualService_go_home_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(ergoCubBimanualService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"go_home"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubBimanualService::go_home()"};
    static constexpr const char* s_help{""};
};

// stop helper class declaration
class ergoCubBimanualService_stop_helper :
        public yarp::os::Portable
{
public:
    ergoCubBimanualService_stop_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(ergoCubBimanualService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"stop"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubBimanualService::stop()"};
    static constexpr const char* s_help{""};
};

// go_to_pose helper class implementation
ergoCubBimanualService_go_to_pose_helper::ergoCubBimanualService_go_to_pose_helper(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const std::string& arm) :
        cmd{x, y, z, q_x, q_y, q_z, q_w, arm}
{
}

bool ergoCubBimanualService_go_to_pose_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubBimanualService_go_to_pose_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubBimanualService_go_to_pose_helper::Command::Command(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const std::string& arm) :
        x{x},
        y{y},
        z{z},
        q_x{q_x},
        q_y{q_y},
        q_z{q_z},
        q_w{q_w},
        arm{arm}
{
}

bool ergoCubBimanualService_go_to_pose_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubBimanualService_go_to_pose_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubBimanualService_go_to_pose_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_pose_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_pose_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(x)) {
        return false;
    }
    if (!writer.writeFloat64(y)) {
        return false;
    }
    if (!writer.writeFloat64(z)) {
        return false;
    }
    if (!writer.writeFloat64(q_x)) {
        return false;
    }
    if (!writer.writeFloat64(q_y)) {
        return false;
    }
    if (!writer.writeFloat64(q_z)) {
        return false;
    }
    if (!writer.writeFloat64(q_w)) {
        return false;
    }
    if (!writer.writeString(arm)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_pose_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_pose_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_pose_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(q_x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(q_y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(q_z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(q_w)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(arm)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_pose_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubBimanualService_go_to_pose_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubBimanualService_go_to_pose_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubBimanualService_go_to_pose_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubBimanualService_go_to_pose_helper::call(ergoCubBimanualService* ptr)
{
    reply.return_helper = ptr->go_to_pose(cmd.x, cmd.y, cmd.z, cmd.q_x, cmd.q_y, cmd.q_z, cmd.q_w, cmd.arm);
}

// go_to_position helper class implementation
ergoCubBimanualService_go_to_position_helper::ergoCubBimanualService_go_to_position_helper(const double x, const double y, const double z, const std::string& arm) :
        cmd{x, y, z, arm}
{
}

bool ergoCubBimanualService_go_to_position_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubBimanualService_go_to_position_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubBimanualService_go_to_position_helper::Command::Command(const double x, const double y, const double z, const std::string& arm) :
        x{x},
        y{y},
        z{z},
        arm{arm}
{
}

bool ergoCubBimanualService_go_to_position_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubBimanualService_go_to_position_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubBimanualService_go_to_position_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_position_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_position_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(x)) {
        return false;
    }
    if (!writer.writeFloat64(y)) {
        return false;
    }
    if (!writer.writeFloat64(z)) {
        return false;
    }
    if (!writer.writeString(arm)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_position_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_position_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_position_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(arm)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_to_position_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubBimanualService_go_to_position_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubBimanualService_go_to_position_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubBimanualService_go_to_position_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubBimanualService_go_to_position_helper::call(ergoCubBimanualService* ptr)
{
    reply.return_helper = ptr->go_to_position(cmd.x, cmd.y, cmd.z, cmd.arm);
}

// rotate_rad helper class implementation
ergoCubBimanualService_rotate_rad_helper::ergoCubBimanualService_rotate_rad_helper(const double angle, const double x, const double y, const double z, const std::string& arm) :
        cmd{angle, x, y, z, arm}
{
}

bool ergoCubBimanualService_rotate_rad_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubBimanualService_rotate_rad_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubBimanualService_rotate_rad_helper::Command::Command(const double angle, const double x, const double y, const double z, const std::string& arm) :
        angle{angle},
        x{x},
        y{y},
        z{z},
        arm{arm}
{
}

bool ergoCubBimanualService_rotate_rad_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubBimanualService_rotate_rad_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubBimanualService_rotate_rad_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_rad_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_rad_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(angle)) {
        return false;
    }
    if (!writer.writeFloat64(x)) {
        return false;
    }
    if (!writer.writeFloat64(y)) {
        return false;
    }
    if (!writer.writeFloat64(z)) {
        return false;
    }
    if (!writer.writeString(arm)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_rad_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_rad_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_rad_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(angle)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(arm)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_rad_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubBimanualService_rotate_rad_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubBimanualService_rotate_rad_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubBimanualService_rotate_rad_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubBimanualService_rotate_rad_helper::call(ergoCubBimanualService* ptr)
{
    reply.return_helper = ptr->rotate_rad(cmd.angle, cmd.x, cmd.y, cmd.z, cmd.arm);
}

// rotate_deg helper class implementation
ergoCubBimanualService_rotate_deg_helper::ergoCubBimanualService_rotate_deg_helper(const double angle, const double x, const double y, const double z, const std::string& arm) :
        cmd{angle, x, y, z, arm}
{
}

bool ergoCubBimanualService_rotate_deg_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubBimanualService_rotate_deg_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubBimanualService_rotate_deg_helper::Command::Command(const double angle, const double x, const double y, const double z, const std::string& arm) :
        angle{angle},
        x{x},
        y{y},
        z{z},
        arm{arm}
{
}

bool ergoCubBimanualService_rotate_deg_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubBimanualService_rotate_deg_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubBimanualService_rotate_deg_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_deg_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_deg_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(angle)) {
        return false;
    }
    if (!writer.writeFloat64(x)) {
        return false;
    }
    if (!writer.writeFloat64(y)) {
        return false;
    }
    if (!writer.writeFloat64(z)) {
        return false;
    }
    if (!writer.writeString(arm)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_deg_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_deg_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_deg_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(angle)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(arm)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_rotate_deg_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubBimanualService_rotate_deg_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubBimanualService_rotate_deg_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubBimanualService_rotate_deg_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubBimanualService_rotate_deg_helper::call(ergoCubBimanualService* ptr)
{
    reply.return_helper = ptr->rotate_deg(cmd.angle, cmd.x, cmd.y, cmd.z, cmd.arm);
}

// get_pose helper class implementation
ergoCubBimanualService_get_pose_helper::ergoCubBimanualService_get_pose_helper(const std::string& arm) :
        cmd{arm}
{
}

bool ergoCubBimanualService_get_pose_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubBimanualService_get_pose_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubBimanualService_get_pose_helper::Command::Command(const std::string& arm) :
        arm{arm}
{
}

bool ergoCubBimanualService_get_pose_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubBimanualService_get_pose_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubBimanualService_get_pose_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_get_pose_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_get_pose_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(arm)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_get_pose_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_get_pose_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_get_pose_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(arm)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_get_pose_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubBimanualService_get_pose_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubBimanualService_get_pose_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubBimanualService_get_pose_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubBimanualService_get_pose_helper::call(ergoCubBimanualService* ptr)
{
    reply.return_helper = ptr->get_pose(cmd.arm);
}

// go_home helper class implementation
bool ergoCubBimanualService_go_home_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubBimanualService_go_home_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ergoCubBimanualService_go_home_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubBimanualService_go_home_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubBimanualService_go_home_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_home_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_home_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ergoCubBimanualService_go_home_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_home_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_home_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_go_home_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubBimanualService_go_home_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubBimanualService_go_home_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubBimanualService_go_home_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubBimanualService_go_home_helper::call(ergoCubBimanualService* ptr)
{
    reply.return_helper = ptr->go_home();
}

// stop helper class implementation
bool ergoCubBimanualService_stop_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubBimanualService_stop_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ergoCubBimanualService_stop_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubBimanualService_stop_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubBimanualService_stop_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_stop_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_stop_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ergoCubBimanualService_stop_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubBimanualService_stop_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_stop_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubBimanualService_stop_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubBimanualService_stop_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubBimanualService_stop_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubBimanualService_stop_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubBimanualService_stop_helper::call(ergoCubBimanualService* ptr)
{
    reply.return_helper = ptr->stop();
}

// Constructor
ergoCubBimanualService::ergoCubBimanualService()
{
    yarp().setOwner(*this);
}

bool ergoCubBimanualService::go_to_pose(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const std::string& arm)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubBimanualService_go_to_pose_helper::s_prototype);
    }
    ergoCubBimanualService_go_to_pose_helper helper{x, y, z, q_x, q_y, q_z, q_w, arm};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool ergoCubBimanualService::go_to_position(const double x, const double y, const double z, const std::string& arm)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubBimanualService_go_to_position_helper::s_prototype);
    }
    ergoCubBimanualService_go_to_position_helper helper{x, y, z, arm};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool ergoCubBimanualService::rotate_rad(const double angle, const double x, const double y, const double z, const std::string& arm)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubBimanualService_rotate_rad_helper::s_prototype);
    }
    ergoCubBimanualService_rotate_rad_helper helper{angle, x, y, z, arm};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool ergoCubBimanualService::rotate_deg(const double angle, const double x, const double y, const double z, const std::string& arm)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubBimanualService_rotate_deg_helper::s_prototype);
    }
    ergoCubBimanualService_rotate_deg_helper helper{angle, x, y, z, arm};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

yarp::sig::Matrix ergoCubBimanualService::get_pose(const std::string& arm)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubBimanualService_get_pose_helper::s_prototype);
    }
    ergoCubBimanualService_get_pose_helper helper{arm};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::sig::Matrix{};
}

bool ergoCubBimanualService::go_home()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubBimanualService_go_home_helper::s_prototype);
    }
    ergoCubBimanualService_go_home_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool ergoCubBimanualService::stop()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubBimanualService_stop_helper::s_prototype);
    }
    ergoCubBimanualService_stop_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

// help method
std::vector<std::string> ergoCubBimanualService::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(ergoCubBimanualService_go_to_pose_helper::s_tag);
        helpString.emplace_back(ergoCubBimanualService_go_to_position_helper::s_tag);
        helpString.emplace_back(ergoCubBimanualService_rotate_rad_helper::s_tag);
        helpString.emplace_back(ergoCubBimanualService_rotate_deg_helper::s_tag);
        helpString.emplace_back(ergoCubBimanualService_get_pose_helper::s_tag);
        helpString.emplace_back(ergoCubBimanualService_go_home_helper::s_tag);
        helpString.emplace_back(ergoCubBimanualService_stop_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == ergoCubBimanualService_go_to_pose_helper::s_tag) {
            helpString.emplace_back(ergoCubBimanualService_go_to_pose_helper::s_prototype);
        }
        if (functionName == ergoCubBimanualService_go_to_position_helper::s_tag) {
            helpString.emplace_back(ergoCubBimanualService_go_to_position_helper::s_prototype);
        }
        if (functionName == ergoCubBimanualService_rotate_rad_helper::s_tag) {
            helpString.emplace_back(ergoCubBimanualService_rotate_rad_helper::s_prototype);
        }
        if (functionName == ergoCubBimanualService_rotate_deg_helper::s_tag) {
            helpString.emplace_back(ergoCubBimanualService_rotate_deg_helper::s_prototype);
        }
        if (functionName == ergoCubBimanualService_get_pose_helper::s_tag) {
            helpString.emplace_back(ergoCubBimanualService_get_pose_helper::s_prototype);
        }
        if (functionName == ergoCubBimanualService_go_home_helper::s_tag) {
            helpString.emplace_back(ergoCubBimanualService_go_home_helper::s_prototype);
        }
        if (functionName == ergoCubBimanualService_stop_helper::s_tag) {
            helpString.emplace_back(ergoCubBimanualService_stop_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool ergoCubBimanualService::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 3;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if(tag == "getRemoteProtocolVersion") {
            if (!reader.noMore()) {
                yError("Reader invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                reader.fail();
                return false;
            }

            auto proto = getLocalProtocolVersion();

            yarp::os::idl::WireWriter writer(reader);
           if (!writer.writeListHeader(1)) {
                yWarning("Writer invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
               return false;}
            if (!writer.write(proto)) {
                yWarning("Writer invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubBimanualService_go_to_pose_helper::s_tag) {
            ergoCubBimanualService_go_to_pose_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubBimanualService_go_to_position_helper::s_tag) {
            ergoCubBimanualService_go_to_position_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubBimanualService_rotate_rad_helper::s_tag) {
            ergoCubBimanualService_rotate_rad_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubBimanualService_rotate_deg_helper::s_tag) {
            ergoCubBimanualService_rotate_deg_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubBimanualService_get_pose_helper::s_tag) {
            ergoCubBimanualService_get_pose_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubBimanualService_go_home_helper::s_tag) {
            ergoCubBimanualService_go_home_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubBimanualService_stop_helper::s_tag) {
            ergoCubBimanualService_stop_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
